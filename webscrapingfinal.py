# -*- coding: utf-8 -*-
"""WebScrapingFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tGtmEtKeBcxE0E4YyeZLfPh8IEZIA6KV
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import sqlite3
import matplotlib.pyplot as plt

# Step 1: Scrape Data from Website
def scrape_covid_data(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
    }
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        raise Exception("Failed to fetch data from the website.")

    soup = BeautifulSoup(response.text, 'html.parser')
    table = soup.find('table', id='main_table_countries_today')
    if not table:
        raise Exception("Failed to find the data table on the page.")

    # Extract headers and rows
    header_row = table.find('tr')
    columns = [col.text.strip() for col in header_row.find_all('th')][:13]  # Limit to 13 columns
    rows = table.find_all('tr')[1:]  # Skip header row

    data = []
    for row in rows:
        cols = row.find_all('td')
        cols = [col.text.strip().replace(',', '').replace('+', '') for col in cols[:13]]  # Match column count
        data.append(cols)

    df = pd.DataFrame(data, columns=columns)
    return df

# Step 2: Save Data to CSV
def save_to_csv(df, filename):
    df.to_csv(filename, index=False)
    print(f"Data saved to {filename}")

# Step 3: Save Data to Database
def save_to_database(df, db_name):
    conn = sqlite3.connect(db_name)
    c = conn.cursor()

    try:
        # Create the tables
        c.execute('''CREATE TABLE IF NOT EXISTS covid_data (
            Country TEXT PRIMARY KEY,
            TotalCases INTEGER,
            NewCases INTEGER,
            TotalDeaths INTEGER,
            NewDeaths INTEGER,
            TotalRecovered INTEGER,
            ActiveCases INTEGER,
            SeriousCritical INTEGER,
            TotalCasesPer1M INTEGER,
            DeathsPer1M INTEGER,
            TotalTests INTEGER,
            TestsPer1M INTEGER,
            Population INTEGER
        )''')

        c.execute('''CREATE TABLE IF NOT EXISTS updated_covid_data (
            Country TEXT PRIMARY KEY,
            NewCases INTEGER,
            NewDeaths INTEGER,
            ActiveCases INTEGER,
            SeriousCritical INTEGER,
            DeathsPer1M REAL,
            NewRecovered INTEGER,
            MortalityRate REAL
        )''')

        # Clean Data: Drop columns with no data and replace remaining NaN with 0
        df = df.dropna(how='all', axis=1)  # Drop empty columns
        df = df.fillna(0)  # Replace NaN with 0

        # Convert necessary columns to numeric
        for col in ['NewCases', 'NewDeaths', 'ActiveCases', 'TotalRecovered']:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

        # Insert data into the tables
        for _, row in df.iterrows():
            # Insert into `covid_data`
            c.execute('''
                INSERT OR REPLACE INTO covid_data
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', tuple(row.values))

            # Calculate MortalityRate and insert into `updated_covid_data`
            mortality_rate = (row['NewDeaths'] / row['NewCases']) if row['NewCases'] > 0 else 0
            c.execute('''
                INSERT OR REPLACE INTO updated_covid_data
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (row['Country,Other'], row['NewCases'], row['NewDeaths'],
                  row['ActiveCases'], row['TotalRecovered'], mortality_rate))

        conn.commit()
        print(f"Data saved to database: {db_name}")

    except Exception as e:
        print(f"Error: {e}")
    finally:
        conn.close()

# Step 4: Perform Basic SQL Queries
def clean_database(db_name):
    conn = sqlite3.connect(db_name)
    c = conn.cursor()

    # Update NULL values to 0
    c.execute('UPDATE covid_data SET TotalCases = 0 WHERE TotalCases IS NULL')
    c.execute('UPDATE covid_data SET NewCases = 0 WHERE NewCases IS NULL')
    c.execute('UPDATE covid_data SET TotalDeaths = 0 WHERE TotalDeaths IS NULL')
    conn.commit()
    conn.close()
    print("Database cleaned: NULLs updated to 0")

def display_table(db_name, table_name):
    conn = sqlite3.connect(db_name)
    query = f"SELECT * FROM {table_name};"
    df = pd.read_sql_query(query, conn)
    conn.close()
    print(f"\nTable: {table_name}\n")
    print(df.to_string(index=False))
    return df

# Step 5: Convert Database to CSV
def database_to_csv(db_name, table_name, csv_name):
    conn = sqlite3.connect(db_name)
    df = pd.read_sql_query(f"SELECT * FROM {table_name}", conn)
    conn.close()
    df.to_csv(csv_name, index=False)
    print(f"Table {table_name} exported to {csv_name}")

# Step 6: Perform Descriptive Statistical Analysis
def perform_statistical_analysis(df):
    stats = df.describe()  # Includes mean, std, min, max, etc.
    variance = df.var(numeric_only=True)  # Variance
    print("\nDescriptive Statistics:\n", stats)
    print("\nVariance:\n", variance)
    return stats, variance

# Step 7: Visualize Data with Matplotlib
def visualize_data(df):
    # Ensure numeric columns are properly converted
    df = df.apply(pd.to_numeric, errors='coerce')  # Convert to numeric for plotting
    df.fillna(0, inplace=True)  # Replace NaN with 0


    # Example 3: Line chart for Total Deaths over Countries
    plt.figure(figsize=(12, 6))
    df.sort_values('TotalDeaths', ascending=False).head(20).plot(
        x='Country', y='TotalDeaths', kind='line', marker='o', color='red'
    )
    plt.title("Top 20 Countries by Total Deaths")
    plt.xlabel("Country")
    plt.ylabel("Total Deaths")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Example 4: Scatter plot for Total Cases vs Population
    plt.figure(figsize=(10, 6))
    plt.scatter(df['Population'], df['TotalCases'], alpha=0.6, color='purple')
    plt.title("Total Cases vs Population")
    plt.xlabel("Population")
    plt.ylabel("Total Cases")
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Example 5: Histogram for Active Cases
    plt.figure(figsize=(10, 6))
    df['ActiveCases'].plot(kind='hist', bins=20, color='green', alpha=0.7)
    plt.title("Distribution of Active Cases")
    plt.xlabel("Active Cases")
    plt.ylabel("Frequency")
    plt.grid(axis='y')
    plt.tight_layout()
    plt.show()


# Main Script
if __name__ == '__main__':
    url = 'https://www.worldometers.info/coronavirus/'
    db_name = 'world_covid_data.db'
    csv_name = 'world_covid_data.csv'

    # Step 1: Scrape Data
    covid_df = scrape_covid_data(url)

    # Step 2: Save Data to CSV
    save_to_csv(covid_df, 'raw_covid_data.csv')

    # Step 3: Save Data to Database
    save_to_database(covid_df, db_name)

    # Step 4: Perform Basic SQL Queries
    clean_database(db_name)
    display_table(db_name, "covid_data")
    display_table(db_name, "updated_covid_data")

    # Step 5: Convert Database to CSV
    database_to_csv(db_name, 'covid_data', csv_name)

    # Step 6: Perform Descriptive Statistical Analysis
    covid_df_cleaned = pd.read_csv(csv_name)
    perform_statistical_analysis(covid_df_cleaned)

    # Step 7: Visualize Data
    visualize_data(covid_df_cleaned)

import sqlite3
import pandas as pd

# Connect to the database
conn = sqlite3.connect('/content/world_covid_data.db')

# View tables
tables = pd.read_sql_query("SELECT name FROM sqlite_master WHERE type='table';", conn)
print("Tables in the database:")
print(tables)

# View covid_data table
covid_data = pd.read_sql_query("SELECT * FROM covid_data;", conn)
print("\nCovid Data Table:")
print(covid_data)

# View updated_covid_data table
updated_covid_data = pd.read_sql_query("SELECT * FROM updated_covid_data;", conn)
print("\nUpdated Covid Data Table:")
print(updated_covid_data)

conn.close()